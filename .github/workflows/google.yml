# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build, Release and Deploy to GKE

on:
  push:
    tags:
      - '*'

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: autopilot-cluster-1    # TODO: update to cluster name
  GKE_ZONE: us-central1   # TODO: update to cluster zone
  DEPLOYMENT_NAME: game-session # TODO: update to deployment name
  REPOSITORIO: personal-artifacts # TODO: update to Artifact Registry docker repository
  IMAGE: game-session
  GC_GITHUB_SERVICE_ACCOUNT: github-actions@solar-climber-362702.iam.gserviceaccount.com
  GC_GITHUB_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_CLOUD_GITHUB_SERVICE_ACCOUNT_KEY }}

jobs:        
  setup-build-release-publish-deploy:
    name: Setup, Build, Export, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: export game for client
      id: export
      uses: firebelley/godot-export@v4.2.0
      with:
        wine_path: ${{ steps.wine_install.outputs.WINE_PATH }}
        godot_executable_download_url: https://github.com/godotengine/godot/releases/download/3.5.1-stable/Godot_v3.5.1-stable_linux_headless.64.zip
        godot_export_templates_download_url: https://github.com/godotengine/godot/releases/download/3.5.1-stable/Godot_v3.5.1-stable_export_templates.tpz
        relative_project_path: ./
        archive_output: true
        verbose: true

    - uses: actions/checkout@v2
    - name: Set env
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      
      # https://github.com/softprops/action-gh-release
    - name: create release
      uses: softprops/action-gh-release@v0.1.14
      with:
        token: ${{ secrets.TOKEN_GITHUB }}
        generate_release_notes: true
        tag_name: ${{ env.RELEASE_VERSION }}
        files: ${{ steps.export.outputs.archive_directory }}/*
    
        # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ env.GC_GITHUB_SERVICE_ACCOUNT_KEY }}'
          
    - name: Docker login
      uses: docker/login-action@v2
      with:
        registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
        username: _json_key
        password: ${{ env.GC_GITHUB_SERVICE_ACCOUNT_KEY }}
    
    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORIO/$IMAGE:latest" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
  
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin $GAR_LOCATION-docker.pkg.dev
        docker image push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORIO/$IMAGE:latest"
        
    # Set up kustomize
    #- name: Set up Kustomize
    #  run: |-
    #    curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
    # Deploy the Docker image to the GKE cluster
    #- name: Deploy
    #  run: |-
    #    # replacing the image name in the k8s template
    #    kustomize build . | kubectl apply -f -
    #    kubectl rollout status deployment/$DEPLOYMENT_NAME
    #    kubectl get services -o wide
